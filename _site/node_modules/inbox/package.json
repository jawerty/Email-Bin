{
  "name": "inbox",
  "version": "0.1.31",
  "author": {
    "name": "Andris Reinman"
  },
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "main": "lib/client.js",
  "dependencies": {
    "mimelib": "*",
    "iconv": "*",
    "xoauth2": "*"
  },
  "devDependencies": {
    "nodeunit": "*"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/andris9/inbox"
  },
  "license": "MIT",
  "readme": "# inbox\n\nThis is a work in progress IMAP client for node.js.\n\nThe project consists of two major parts\n\n  * IMAP command parser (token based, more or less complete)\n  * IMAP control for accessing mailboxes (under construction)\n\n[![Build Status](https://secure.travis-ci.org/andris9/inbox.png)](http://travis-ci.org/andris9/inbox)\n\n## Installation\n\nInstall from npm\n\n    npm install inbox\n\n## API\n\n**NB!** This API is preliminary and may change.\n\nUse **inbox** module\n```javascript\n    var inbox = require(\"inbox\");\n```\n### Create new IMAP connection\n\nCreate connection object with\n```javascript\n    inbox.createConnection(port, host, options)\n```\n\nwhere\n\n  * **port** is the port to the server (defaults to 143 on non-secure and to 993 on secure connection)\n  * **host** is the hostname of the server\n  * **options** is an options object for auth etc.\n  * **options.secureConnection** is a Boolean value to indicate if the connection is initially secure or not\n  * **options.auth** is an authentication object\n  * **options.auth.user** is the IMAP username\n  * **options.auth.pass** is the IMAP password\n  * **options.auth.XOAuth2** (optional) is either an object with {user, clientId, clientSecret, refreshToken} or *xoauth2.createXOAuth2Generator* object, see [xoauth2](https://github.com/andris9/xoauth2) for details\n  * **options.auth.XOAuthToken** (optional) is either a String or *inbox.createXOAuthGenerator* object\n  * **options.clientId** is optional client ID params object\n  * **options.clientId.name** is is the name param etc. see [rfc 2971](http://tools.ietf.org/html/rfc2971#section-3.3) for possible field names\n\nExample:\n```javascript\n    var client = inbox.createConnection(false, \"imap.gmail.com\", {\n        secureConnection: true,\n        auth:{\n            user: \"test.nodemailer@gmail.com\",\n            pass: \"Nodemailer123\"\n        }\n    });\n```\n\nOr for login with XOAUTH2 (see examples/xoauth2)\n```javascript\n    // XOAUTH2\n    var client = inbox.createConnection(false, \"imap.gmail.com\", {\n        secureConnection: true,\n        auth:{\n            XOAuth2:{\n                user: \"example.user@gmail.com\",\n                clientId: \"8819981768.apps.googleusercontent.com\",\n                clientSecret: \"{client_secret}\",\n                refreshToken: \"1/xEoDL4iW3cxlI7yDbSRFYNG01kVKM2C-259HOF2aQbI\",\n                accessToken: \"vF9dft4qmTc2Nvb3RlckBhdHRhdmlzdGEuY29tCg==\",\n                timeout: 3600\n            }\n        }\n    });\n```\n\n\nOr for login with XOAUTH (see examples/xoauth-3lo.js and examples/xoauth-2lo.js)\n\n```javascript\n    // 3-legged- oauth\n    var client = inbox.createConnection(false, \"imap.gmail.com\", {\n        secureConnection: true,\n        auth:{\n            XOAuthToken: inbox.createXOAuthGenerator({\n                user: \"test.nodemailer@gmail.com\",\n                token: \"1/Gr2OVA2Ol64fNyjZCns-bkRau5eLisbdlEa_HSuTaEk\",\n                tokenSecret: \"ymFpseHtEnrIsuL8Ppbfnnk3\"\n            })\n        }\n    });\n```\n\nWith 2-legged OAuth, consumerKey and consumerSecret need to have proper values, vs 3-legged OAuth where both default to \"anonymous\".\n```javascript\n    // 2-legged- oauth\n    var client = inbox.createConnection(false, \"imap.gmail.com\", {\n        secureConnection: true,\n        auth:{\n            XOAuthToken: inbox.createXOAuthGenerator({\n                user: \"test.nodemailer@gmail.com\",\n                requestorId: \"test.nodemailer@gmail.com\",\n                consumerKey: \"1/Gr2OVA2Ol64fNyjZCns-bkRau5eLisbdlEa_HSuTaEk\",\n                consumerSecret: \"ymFpseHtEnrIsuL8Ppbfnnk3\"\n            })\n        }\n    });\n```\n\nOnce the connection object has been created, use connect() to create the actual connection.\n```javascript\n    client.connect();\n```\n\nWhen the connection has been successfully established a 'connect' event is emitted.\n```javascript\n    client.on(\"connect\", function(){\n        console.log(\"Successfully connected to server\");\n    });\n```\n\n### Logout and disconnect\n\nLogout from IMAP and close NET connection.\n\n```javascript\n  client.close();\n\n  client.on('close', function (){\n    console.log('DISCONNECTED!');\n  });\n\n```\n\n### List available mailboxes\n\nTo list the available mailboxes use\n```javascript\n    client.listMailboxes(callback)\n```\n\nWhere\n\n  * **callback** *(error, mailboxes)* returns a list of root mailbox object\n\nMailbox objects have the following properties\n\n  * **name** - the display name of the mailbox\n  * **path** - the actual name of the mailbox, use it for opening the mailbox\n  * **type** - the type of the mailbox (if server hints about it)\n  * **hasChildren** - boolean indicator, if true, has child mailboxes\n  * **disabled** - boolean indicator, if true, can not be selected\n\nAdditionally mailboxes have the following methods\n\n  * **open** *([options, ]callback)* - open the mailbox (shorthand for *client.openMailbox*)\n  * **listChildren** *(callback)* - if the mailbox has children (*hasChildren* is true), lists the child mailboxes\n\nExample:\n```javascript\n    client.listMailboxes(function(error, mailboxes){\n        for(var i=0, len = mailboxes.length; i<len; i++){\n            if(mailboxes[i].hasChildren){\n                mailboxes[i].listChildren(function(error, children){\n                    console.log(children);\n                });\n            }\n        }\n    });\n```\n\n### Fetch a specified mailbox object\n\nIf you need to access a specific mailbox object (for creating or listing child\nmailboxes etc.), you can do it with\n```javascript\n    client.getMailbox(path, callback)\n```\n\nWhere\n\n  * **path** is the mailbox directory path\n  * **callback** *(error, mailbox)* is the callback function\n\nExample:\n```javascript\n    client.getMailbox(\"INBOX.Arhiiv\", function(error, mailbox){\n        if(mailbox && mailbox.hasChildren){\n            mailbox.listChildren(console.log);\n        }\n    });\n```\n\n### Select a mailbox\n\nBefore you can check mailbox contents, you need to select one with\n```javascript\n    client.openMailbox(path[, options], callback)\n```\n\nWhere\n\n  * **path** is the path to the mailbox (ie. \"INBOX\" or \"INBOX/Arhiiv\") or a mailbox object\n  * **options** is an optional options object\n  * **options.readOnly** - if set to true, open the mailbox in read-only mode (downloading messages does not update seen/unseen flag)\n  * **callback** *(error, info)* is a callback function to run after the mailbox has been opened. Has an error param in case the opening failed and a info param with the properties of the opened mailbox.\n\nExample\n```javascript\n    client.on(\"connect\", function(){\n        client.openMailbox(\"INBOX\", function(error, info){\n            if(error) throw error;\n            console.log(\"Message count in INBOX: \" + info.count);\n        });\n    });\n```\n\n### Listing e-mails\n\nOnce a mailbox has been opened you can list contained e-mails with\n```javascript\n    client.listMessages(from[, limit], callback)\n```\n\nWhere\n\n  * **from** is the index of the first message (0 based), you can use negative numbers to count from the end (-10 indicates the 10 last messages)\n  * **limit** defines the maximum count of messages to fetch, if not set or 0 all messages from the starting position will be included\n  * **callback** *(error, messages)* is the callback function to run with the message array\n\nExample\n```javascript\n    // list newest 10 messages\n    client.listMessages(-10, function(err, messages){\n        messages.forEach(function(message){\n            console.log(message.UID + \": \" + message.title);\n        });\n    });\n```\n\nExample output for a message listing\n```javascript\n    [\n        {\n            // if uidvalidity changes, all uid values are void!\n            UIDValidity: '664399135',\n\n            // uid value of the message\n            UID: 52,\n\n            // message flags (Array)\n            flags: [ '\\\\Flagged', '\\\\Seen' ],\n\n            // date of the message (Date object)\n            date: Wed, 25 Apr 2012 12:23:05 GMT,\n\n            title: 'This is a message, may contain unicode symbols',\n\n            // single \"from:\" address\n            from: {\n                name: 'Andris Reinman',\n                address: 'andris.reinman@gmail.com'\n            },\n\n            // an array of \"to:\" addresses\n            to: [\n                {\n                    name: 'test nodemailer',\n                    address: 'test.nodemailer@gmail.com'\n                }\n            ],\n\n            // an array of \"cc:\" addresses\n            cc: [\n                {\n                    name: 'test nodemailer',\n                    address: 'test.nodemailer@gmail.com'\n                }\n            ],\n\n            messageId: '<04541AB5-9FBD-4255-81AA-18FE67CB97E5@gmail.com>',\n            inReplyTo: '<4FB16D5A.30808@gmail.com>',\n            references: ['<4FB16D5A.30808@gmail.com>','<1299323903.19454@foo.bar>']\n        },\n        ...\n    ]\n```\n\n**NB!** If some properties are not present in a message, it may be not included\nin the message object - for example, if there are no \"cc:\" addresses listed,\nthere is no \"cc\" field in the message object.\n\n### Listing flags\n\nAs a shorthand listing, you can also list only UID and Flags pairs\n```javascript\n    client.listFlags(from[, limit], callback)\n```\n\nWhere\n\n  * **from** is the index of the first message (0 based), you can use negative numbers to count from the end (-10 indicates the 10 last messages)\n  * **limit** defines the maximum count of messages to fetch, if not set or 0 all messages from the starting position will be included\n  * **callback** *(error, messages)* is the callback function to run with the message array\n\nExample\n```javascript\n    // list flags for newest 10 messages\n    client.listFlags(-10, function(err, messages){\n        messages.forEach(function(message){\n            console.log(message.UID, message.flags);\n        });\n    });\n```\n\nExample output for a message listing\n```javascript\n    [\n        {\n            // if uidvalidity changes, all uid values are void!\n            UIDValidity: '664399135',\n\n            // uid value of the message\n            UID: 52,\n\n            // message flags (Array)\n            flags: [ '\\\\Flagged', '\\\\Seen' ]\n        },\n        ...\n    ]\n```\n\n### Fetch message details\n\nTo fetch message data (flags, title, etc) for a specific message, use\n```javascript\n    client.fetchData(uid, callback)\n```\n\nWhere\n\n  * **uid** is the UID value for the mail\n  * **callback** *(error, message)* is the callback function to with the message data object (or null if the message was not found). Gets an error parameter if error occured\n\nExample\n```javascript\n    client.fetchData(123, function(error, message){\n        console.log(message.flags);\n    });\n```\n\n### Fetch message contents\n\nMessage listing only retrieves the envelope part of the message. To get the full RFC822 message body\nyou need to fetch the message.\n```javascript\n    var messageStream = client.createMessageStream(uid)\n```\n\nWhere\n\n  * **uid** is the UID value for the mail\n\nExample (output message contents to console)\n```javascript\n    client.createMessageStream(123).pipe(process.stdout, {end: false});\n```\n\n**NB!** If the opened mailbox is not in read-only mode, the message will be\nautomatically marked as read (\\Seen flag is set) when the message is fetched.\n\n### Message flags\n\nYou can add and remove message flags like `\\Seen` or `\\Answered` with `client.addFlags()` and `client.removeFlags()`\n\n**List flags**\n```javascript\n    client.fetchFlags(uid, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier\n  * **callback** *(error, flags)* is the callback to run, gets message flags array as a parameter\n\n**Add flags**\n```javascript\n    client.addFlags(uid, flags, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier\n  * **flags** is the array of flags to be added\n  * **callback** *(error, flags)* is the callback to run, gets message flags array as a parameter\n\n**Remove flags**\n```javascript\n    client.removeFlags(uid, flags, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier\n  * **flags** is the array of flags to be removed\n  * **callback** *(error, flags)* is the callback to run, gets message flags array as a parameter\n\nExample\n```javascript\n    // add \\Seen and \\Flagged flag to a message\n    client.addFlags(123, [\"\\\\Seen\", \"\\\\Flagged\"], function(err, flags){\n        console.log(\"Current flags for a message: \", flags);\n    });\n\n    // remove \\Flagged flag from a message\n    client.removeFlags(123, [\"\\\\Flagged\"], function(err, flags){\n        console.log(\"Current flags for a message: \", flags);\n    });\n```\n\n### Upload a message\n\nYou can upload a message to current mailbox with `client.storeMessage()`\n```javascript\n    client.storeMessage(message[, flags], callback)\n```\n\nWhere\n\n  * **message** is the message to be uploaded either as a string or a Buffer.\n  * **flags** is an array of flags to set to the message (ie. `[\"\\\\Seen\"]`)\n  * **callback** is the callback function, gets message UID and UID and UIDValitity as a param\n\nExample\n```javascript\n    client.storeMessage(\"From: ....\", [\"\\\\Seen\"], function(err, params){\n        console.log(err || params.UIDValidity +\", \"+ params.UID);\n    });\n```\n\nWhen adding a message to the mailbox, the new message event is also raised after\nthe mail has been stored.\n\n### Copy a message\n\nYou can copy a message from the current mailbox to a selected one with `client.copyMessage()`\n```javascript\n    client.copyMessage(uid, destination, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier.\n  * **destination** is the path to the destination mailbox\n  * **callback** is the callback function\n\nExample\n```javascript\n    client.copyMessage(123, \"[GMail]/Junk\", function(err){\n        console.log(err || \"success, copied to junk\");\n    });\n```\n\n### Move a message\n\nYou can move a message from current mailbox to a selected one with `client.moveMessage()`\n```javascript\n    client.moveMessage(uid, destination, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier.\n  * **destination** is the path to the destination mailbox\n  * **callback** is the callback function\n\nExample\n```javascript\n    client.moveMessage(123, \"[GMail]/Junk\", function(err){\n        console.log(err || \"success, moved to junk\");\n    });\n```\n\n### Delete a message\n\nYou can delete a message from current mailbox with `client.deleteMessage()`\n```javascript\n    client.deleteMessage(uid, callback)\n```\n\nWhere\n\n  * **uid** is the message identifier.\n  * **callback** is the callback function\n\nExample\n```javascript\n    client.deleteMessage(123, function(err){\n        console.log(err || \"success, message deleted\");\n    });\n```\n\n### Wait for new messages\n\nYou can listen for new incoming e-mails with event \"new\"\n```javascript\n    client.on(\"new\", function(message){\n        console.log(\"New incoming message \" + message.title);\n    });\n```\n\n## Complete example\n\nListing newest 10 messages:\n```javascript\n    var inbox = require(\"inbox\");\n\n    var client = inbox.createConnection(false, \"imap.gmail.com\", {\n        secureConnection: true,\n        auth:{\n            user: \"test.nodemailer@gmail.com\",\n            pass: \"Nodemailer123\"\n        }\n    });\n\n    client.connect();\n\n    client.on(\"connect\", function(){\n        client.openMailbox(\"INBOX\", function(error, info){\n            if(error) throw error;\n\n            client.listMessages(-10, function(err, messages){\n                messages.forEach(function(message){\n                    console.log(message.UID + \": \" + message.title);\n                });\n            });\n\n        });\n    });\n```\n\n## License\n\n**MIT**\n",
  "readmeFilename": "README.md",
  "description": "This is a work in progress IMAP client for node.js.",
  "bugs": {
    "url": "https://github.com/andris9/inbox/issues"
  },
  "_id": "inbox@0.1.31",
  "dist": {
    "shasum": "5197cfb8317c4c024316de85831362c5317b5cd7"
  },
  "_from": "inbox@",
  "_resolved": "https://registry.npmjs.org/inbox/-/inbox-0.1.31.tgz"
}
